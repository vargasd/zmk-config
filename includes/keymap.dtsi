#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define QUICK_TAP_MS 200
#define HRM_TAP_MS 280
#define MEH RC(RS(RALT))
#define HYPER LC(LS(LA(LGUI)))
#define BASE 0
#define ALT 1
#define NAV 2
#define NUM 3
#define FN 4
#define LEFT_KEYS      \
        0  1  2  3  4  \
        10 11 12 13 14 \
        20 21 22 23 24
#define RIGHT_KEYS     \
        5  6  7  8  9  \
        15 16 17 18 19 \
        25 26 27 28 29
#define THUMB_KEYS 30 31 32 33 34 35

&mt {
  quick-tap-ms = <QUICK_TAP_MS>;
};

&lt {
  quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
combos {
  compatible = "zmk,combos";
  left_middle_up {
    key-positions = <2 12>;
    bindings = <&kp LPAR>;
  };
  left_index_up {
    key-positions = <3 13>;
    bindings = <&kp RPAR>;
  };
  right_index_up {
    key-positions = <6 16>;
    bindings = <&kp LBKT>;
  };
  right_middle_up {
    key-positions = <7 17>;
    bindings = <&kp RBKT>;
  };
  right_index_down {
    key-positions = <16 26>;
    bindings = <&kp LBRC>;
  };
  right_middle_down {
    key-positions = <17 27>;
    bindings = <&kp RBRC>;
  };
  down_arrow {
    key-positions = <16 34>;
    bindings = <&mo_kp NAV DOWN>;
    require-prior-idle-ms = <120>;
    slow-release; // required for avoiding ⬇️ jjjj when holding space
  };
  up_arrow {
    key-positions = <17 34>;
    bindings = <&mo_kp NAV UP>;
    require-prior-idle-ms = <120>;
    slow-release;
  };
  right_arrow {
    key-positions = <18 34>;
    bindings = <&mo_kp NAV RIGHT>;
    require-prior-idle-ms = <120>;
    slow-release;
  };
  ctrl_space {
    key-positions = <32 33>;
    timeout-ms = <75>;
    bindings = <&mt RC(LSHFT) RC(SPC)>;
  };
  tog_alt {
    key-positions = <0 9>;
    bindings = <&tog ALT>;
  };
};

macros {
  mo_kp: mo_kp {
    label = "momentary_layer_with_key_tap";
    compatible = "zmk,behavior-macro-two-param";
    wait-ms = <0>;
    tap-ms = <0>;
    #binding-cells = <2>;
    bindings =
      <&macro_param_1to1>,
      <&macro_press &mo MACRO_PLACEHOLDER>,
      <&macro_param_2to1>,
      <&macro_tap &kp MACRO_PLACEHOLDER>,
      <&macro_pause_for_release>,
      <&macro_param_1to1>,
      <&macro_release &mo MACRO_PLACEHOLDER>;
  };
};

behaviors {
  lhm: left_home_row_mod {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <HRM_TAP_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-on-release;
    require-prior-idle-ms = <120>;
    hold-trigger-key-positions = <RIGHT_KEYS THUMB_KEYS>;
  };
  rhm: right_home_row_mod {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <HRM_TAP_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-on-release;
    require-prior-idle-ms = <120>;
    hold-trigger-key-positions = <LEFT_KEYS THUMB_KEYS>;
  };
  ht: hold_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <135>;
    quick_tap_ms = <0>;
    bindings = <&kp>, <&kp>;
  };
  lhp: layer_hold_preferred {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <145>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&kp>;
  };
  mtb: mod_tap_balanced {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <145>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&kp>;
  };
  ltb: layer_tap_balanced {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <145>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <120>;
    bindings = <&mo>, <&kp>;
  };
  mqt: mod_quicker_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "hold-preferred";
    tapping-term-ms = <145>;
    quick-tap-ms = <130>;
    bindings = <&kp>, <&kp>;
  };
  scomma: comma_semicolon {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp COMMA>, <&kp SEMI>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  codot: dot_colon {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  minplus: minus_plus {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp MINUS>, <&kp PLUS>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  underqual: underscore_equal {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp UNDER>, <&kp EQUAL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
};

conditional_layers {
  compatible = "zmk,conditional-layers";
  tri_layer {
    if-layers = <NUM NAV>;
    then-layer = <FN>;
  };
};

keymap {
  compatible = "zmk,keymap";

  BASE {
    // COLEMAK-DH
    bindings = <
      // ROW 1
      &kp Q            &kp W            &kp F            &kp P             &kp B
      &kp J            &kp L            &kp U            &kp Y             &kp SQT
      // ROW 2
      &lhm LCTRL A     &lhm LSHFT R     &lhm LALT S      &lhm LGUI T       &lhm MEH G
      &rhm MEH M       &rhm RGUI N      &rhm RALT E      &rhm RSHFT I      &rhm RCTRL O
      // ROW 3
      &kp Z            &kp X            &kp C            &kp D             &kp V
      &kp K            &kp H            &scomma          &codot            &kp FSLH
      // THUMBS
      &mtb MEH DEL     &lhp NUM ESC    &mt LSHFT TAB
                                                         &mqt RCTRL RET    &ltb NAV SPC     &mtb MEH BSPC
      // PINKIES
      &underqual                                                                            &minplus
    >;
  };

  ALT {
    // Pine v4
    bindings = <
      // ROW 1
      &kp Q            &kp L            &kp C            &kp M             &kp K
      &kp SQT          &kp F            &kp U            &kp O             &kp Y
      // ROW 2
      &lhm LCTRL N     &lhm LSHFT R     &lhm LALT S      &lhm LGUI T       &lhm MEH W
      &rhm MEH P       &rhm RGUI H      &rhm RALT E      &rhm RSHFT A      &rhm RCTRL I
      // ROW 3
      &kp J            &kp X            &kp Z            &kp G             &kp V
      &kp B            &kp D            &scomma          &codot            &kp FSLH
      // THUMBS
      &mtb MEH DEL     &lhp NUM ESC    &mt LSHFT TAB
                                                         &mqt RCTRL RET    &ltb NAV SPC     &mtb MEH BSPC
      // PINKIES
      &underqual                                                                            &minplus
    >;
  };

  NAV {
    bindings = <
      // ROW 1
      &kp BANG         &kp PLUS         &kp HASH         &kp AMPS          &none
      &kp CARET        &kp PERCENT      &kp STAR         &kp DOLLAR        &kp GRAVE
      // ROW 2
      &lhm LCTRL BANG  &lhm LSHFT MINUS &lhm LALT EQUAL  &lhm LGUI LT      &lhm MEH GT
      &rhm MEH LEFT    &rhm RGUI DOWN   &rhm RALT UP     &rhm RSHFT RIGHT  &rhm RCTRL AT
      // ROW 3
      &kp TILDE        &kp UNDER        &kp UNDER        &kp PIPE          &none
      &kp HOME         &kp PG_DN        &kp PG_UP        &kp END           &kp BSLH
      // THUMBS
      &trans           &trans           &trans
                                                         &trans            &trans           &trans
      // PINKIES
      &trans                                                                                &trans
    >;
  };

  NUM {
    bindings = <
      // ROW 1
      &trans           &trans           &trans           &trans            &trans
      &trans           &kp N7           &kp N8           &kp N9            &kp GRAVE
      // ROW 2
      &trans           &trans           &trans           &trans            &trans
      &kp N0           &rhm RGUI N4     &rhm RALT N5     &rhm RSHFT N6     &rhm RCTRL AT
      // ROW 3
      &trans           &trans           &trans           &trans            &trans
      &kp N0           &kp N1           &kp N2           &kp N3            &kp BSLH
      // THUMBS
      &trans           &trans           &trans
                                                         &trans            &trans           &trans
      // PINKIES
      &trans                                                                                &trans
    >;
  };

  FN {
    bindings = <
      // ROW 1
      &kp F1           &kp F2           &kp F3           &kp F4            &kp F5
      &kp C_MUTE       &kp C_VOL_DN     &kp C_VOL_UP     &ext_power EP_OFF &bt BT_CLR_ALL
      // ROW 2
      &lhm LCTRL F6    &lhm LSHFT F7    &lhm LALT F8     &lhm LGUI F9      &kp F10
      &kp C_PREV       &rhm RGUI C_PP   &rhm RALT C_NEXT &rhm RSHFT RCTRL  &kp RCTRL
      // ROW 3
      &kp F11          &kp F12          &kp F13          &kp F14           &kp F15
      &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3      &bt BT_SEL 4
      // THUMBS
      &trans           &trans           &trans
                                                         &trans            &trans           &trans
      // PINKIES
      &trans                                                                                &trans
    >;
  };
};
};
